<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8"/>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>6장. 브랜치 ver 3.0</title>
    </head>
    <body>
        <h1>
            3장. 깃 상태 개념
        </h1>
        <p>1. 소스 작성 or 수정하면 워킹디렉터리 이동 </p>
        <p>2. git add하면 스테이지 이동 tracked 상태(stage 상태)</p>
        <p>3. 작성 or 수정하면 modified로 unstage 상태 </p>
        <p>4. unstage 상태에서 다시 git add 후, 커밋! </p>
        <p>* untracked 상태의 워킹디렉터리 속 파일은 untracked 상태 & unstage 상태 </p>

        <h1>
            4장. 커밋
        </h1>
        <p>git rm --cached 파일이름 : 스테이지 삭제</p>
        <p>git reset HEAD 파일이름 : 커밋 후 스테이지 삭제</p>
        <p>git mv "파일 이름" "새파일 이름" : "mv -> git rm 파일 이름 -> git add 새파일 이름"의 과정을 줄인 것</p>
        <p>git commit -a : git add 깜빡했을 때 한번에 전부 add 하기</p>
        <p>git log : 커밋 기록 보기 -> 소스트리가 가독성 더 좋음</p>
        <p>git checkout -- 파일이름 : 커밋 전에 수정하다가 잘못 수정시 수정 전으로 되돌리기</p>
        <p>git commit -m "커밋메시지" : 커밋하면서 커밋 메시지 넣기</p>
        <p>git commit -am : 파일들을 한번에 스테이지에 등록하고 한번에 하나의 커밋 메세지로 커밋</p>
        <p>-a 옵션 : 이미 추적된 파일 상태가 변경되었을 때만 -m과 함께 사용 가능 (* 저장소를 새로 생성하고 새 파일을 작성한 후라면 커밋 불가능, 새로 생성한 파일 git add 해줄 것)</p>
        <p>git commit --allow-empty-message -m "" : 커밋할 때 커밋메시지 없이 커밋</p>
        <p>git show 커밋ID : 특정 커밋 상세 정보</p>
        <p>git log 파일이름 : 특정 파일 커밋 상세 정보</p>
        <p>git log --pretty=short : Date 부분 출력 안하는 커밋 로그</p>
        <p>git log -p : diff 기능</p>
        <p>git log --stat : 수정된 부분 출력</p>
        <p>git diff : 스테이지(a) vs 워킹 디렉터리(b) 비교 내용 출력</p>
        <p>git diff head : 최신 커밋과 변경 내용을 비교 (* HEAD는 마지막 커밋을 가지고 있는 포인터)</p>
        <p>git commit -v : 커밋할 때, diff 내용을 커밋 메시지를 입력하는 vi 에디터에 출력해줘서 diff 내용을 커밋 메시지로 이용할 수 있다.</p>

        <h1>
            5장. 서버
        </h1>
        <p>echo "md표기 작성" >> 파일이름.md : README.md 등의 파일 생성시 사용</p>
        <p>git remote -v : 원격저장소별칭, URL 목록 출력</p>
        <p>git remote add 원격저장소별칭 원격저장소URL : 로컬과 원격 저장소 연결 -> ./git/config 파일에 리모트 연결에 대한 설정 정보 자동 추가</p>
        <p>git remote rename 변경전 변경후 : 별칭을 통한 긴 문자열의 서버 주소를 대체</p>
        <p>git remote show 원격저장소별칭 : 원격저장소별칭을 통한 상세 정보 확인</p>
        <p>git remote rm 원격저장소별칭 : 원격 서버 삭제</p>
        <p>git push 원격저장소별칭 브랜치이름 : 서버에 전송</p>
        <p>git clone 원격저장소URL : 복제할 새 폴더에서 저장소 복제</p>
        <p>ls -all : 파일 목록 확인</p>
        <p>git pull : 서버에 갱신된 내용 가져오기</p>
        <p>git fetch 원격저장소URL : 원격 저장소에서 코드를 수동으로 내려받는 작업, 현재 브랜치와 병합은 하지 않음(충돌방지) -> 커밋 기록에 커밋이 추가되지 않음</p>
        <p>git merge 원격저장소별칭/브랜치이름 : 페치 후 임시 브랜치 영역에 있는 내려받은 커밋을 로컬 저장소에 적용하기 위한 병합 명령</p>
        <h3>최신 상태 개념</h3>
        <p>push하려면 서버 커밋보다 로컬 커밋이 최신 상태이어야 한다. 이는 pull 작업 시 현재 브랜치와 원격의 커밋이 자동 병합하는 과정에서의 충돌 방지를 위한 것이다.</p>
        <p>e.g.</p>
        <p>1. 개발자 1이 개발자 2보다 먼저 push</p>
        <p>2. 개발자 2는 갱신된 서버 정보를 갖지 않고 있어서 push하면 서버에서 push 거절!</p>
        <p>3. 개발자 2는 pull로 서버 정보 갱신 후, push해야 한다.</p>
        <p>* 최대한 충돌을 피하기 위해서는 자신의 저장소와 원격 저장소의 상태를 자주 최신으로 유지해야 한다.</p>
        <p>* 권장 순서 : "pull" -> coding -> commit -> "pull" -> push</p>
        <p>git config --global credential.helper cache : 원격 저장소 이용시 인증 정보 캐시 기능으로 아이디와 비밀번호 임시 보관</p>

        <h1>
            6장. 브랜치
        </h1>
        <p>git branch 브랜치이름 커밋ID : 브랜치 생성</p>
        <p>git branch : 브랜치 목록 출력</p>
        <p>git rev-parse 브랜치이름 : 브랜치는 특정한 커밋의 해시 값(SHA1)을 가리킴. 해당 브랜치가 현재 어떤 커밋 해시 값을 가리키는지 확인</p>
        <p>git branch -v[verdose] : 브랜치 세부 사항 확인</p>
        <p>git checkout 브랜치이름 : 현재 브랜치를 떠나 다른 브랜치로 이동, 깃은 하나의 워킹 디렉터리만 가지고 있음 -> 워킹 디렉터리는 선택한 브랜치 하나만 연결, 작업, 커밋</p>
        <p>git checkout -- 파일이름 : 파일로 체크아웃, --(이중대시)를 이용하면 파일 이름을 정확히 지정하여 브랜치 변경 가능</p>
        <p>git log --graph --all : 브랜치 흐름을 포함한 작업한 로그 기록 확인</p>
        <p>git show-branch --more=출력할커밋수 : 출력될 커밋 개수 제한</p>
        <p>cat 파일이름 : 소스 코드 내용 확인</p>
        <p>checkout 명령시 일어나는 일</p>
        <p>1. HEAD 정보는 브랜치의 마지막 커밋을 가리킴 -> 브랜치 이동시 HEAD 포인터도 함께 이동</p>
        <p>2. 변경된 브랜치에서 새로운 작업을 할 수 있도록 워킹 디렉터리도 변경</p>
        <p>브랜치 이동 시 기존 브랜치의 워킹 디렉터리를 작성하던 내용 및 커밋을 정리해야 브랜치 변경 가능 어기면, 경고 발생</p>
        <p>git checkout - : 브랜치 이름없이 이전 브랜치로 이동</p>
        <h3>HEAD 개념</h3>
        <p>1. 브랜치가 여러개면 HEAD도 여러개다. HEAD는 브랜치마다 마지막 커밋 ID를 가리키는 포인터</p>
        <p>2. 상대적 위치 개념 : HEAD^숫자 or HEAD~숫자 = 현재 브랜치의 HEAD로부터 몇번째 이전의 커밋을 가리킨다. => 최근 특정 위치 지정시에는 해시키 사용이 편하다.</p>
        <p>3. AHEAD와 BHEAD는 서로 다른 저장소 간 HEAD 포인터의 위치 차이를 의미, 브랜치를 다수 운영한다면 다수의 AHEAD와 BHEAD 발생</p>
        <p>4. AHEAD : 서버로 전송되지 않은 '로컬' 커밋이 있는 것. 원격 저장소에 해당 커밋이 없음.</p> 
        <p>5. BHEAD: 로컬 저장소로 내려받지 않은 커밋이 있는 것. 원격 저장소에서 아직 pull하지 않음.</p>
        <p>git checkout -b 브랜치이름 : 브랜치를 생성하고 생성한 브랜치로 이동(자동이동). 이전에는 branch 명령어로 생성 -> checkout 명령어로 이동</p>
        <p>git checkout 커밋해시키 : git branch -v로 조회해서 출력된 커밋해시키로 브랜치 이동 -> 이동 후, 기존 브랜치 이름이 해시키로 표시됨</p>
        <p>git checkout HEAD^숫자 : HEAD를 기준으로 '숫자'단계의 커밋 상태로 이동</p>
        <p>브랜치 추적 : 트래킹 브랜치. 원격 저장소의 브랜치를 가리키는 것을 브랜치 주적이라고 한다. 브랜치는 특정 커밋 해시 값을 가리키는 포인터.</p>
        <p>ls .git/ref/ : 브랜치(포인터) 정보는 .git/ref 폴더 안에 저장되어 있음. 이 명령어를 통해 원격 브랜치 정보 조회</p>
        <p>git push 원격저장소별칭 브랜치이름 : 원격저장소와 로컬저장소의 브랜치 동기화. 리모트 브랜치 전송.</p>
        <p>git push -u 원격저장소별칭 브랜치이름 : 선택한 브랜치를 원격 서버로 전달하는 명령어</p>
    </body>
</html>